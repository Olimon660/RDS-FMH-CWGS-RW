#ifdef UNIT_TEST
#define CATCH_CONFIG_MAIN
#include "catch.hpp"

#include <math.h>
#include "phone.hpp"

using namespace std;
using namespace Catch;
using namespace DreamLab;

TEST_CASE("GeneratorTest")
{
    Generator g;
    
    REQUIRE(g.s1() == 3141);
    REQUIRE(g.s2() == 5926);
    REQUIRE(g.s3() == 5358);
    
    const std::vector<double> t1 { 0.4147450118281868,
                                   0.5143827141487498,
                                   0.03015220792818374,
                                   0.4365735169577616,
                                   0.09628263918446578,
                                   0.5366685678896463,
                                   0.2530302745154309,
                                   0.2116463072864574,
                                   0.5590055430697218,
                                   0.22626394747867762 };
    
    const std::vector<Seed> t2 { 9, 3, 5, 2, 2, 5, 1, 1, 7, 5 };
    const std::vector<Seed> t3 { 983, 848, 242, 22, 651, 556, 355, 604, 690, 658 };

    const std::vector<std::vector<Seed>> t4 { {1, 4, 2, 3, 0},
                                              {2, 3, 4, 0, 1},
                                              {2, 3, 4, 1, 0},
                                              {1, 0, 2, 4, 3},
                                              {2, 3, 0, 4, 1},
                                              {1, 4, 2, 0, 3},
                                              {1, 3, 0, 4, 2},
                                              {0, 3, 4, 2, 1},
                                              {2, 4, 3, 0, 1},
                                              {0, 1, 4, 2, 3} };
    
    for (const auto &i : t1)
    {
        REQUIRE(g.runif() == Approx(i));
    }

    for (const auto &i : t2)
    {
        REQUIRE(g.rint(0, 10) == i);
    }

    for (const auto &i : t3)
    {
        REQUIRE(g.rint(10, 1000) == i);
    }

    for (const auto &i : t4)
    {
        auto r = g.rperm(5);
        
        for (auto j = 0; j < i.size(); j++)
        {
            REQUIRE(r[j] == i[j]);
        }
    }
}

TEST_CASE("LinearTest")
{
    SECTION("IrisData")
    {
        Matrix Y(150, 1);
        Y << 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3;

        Matrix X(150, 3);
        X.col(0) << 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1;
        X.col(1) << 3.5,3,3.2,3.1,3.6,3.9,3.4,3.4,2.9,3.1,3.7,3.4,3,3,4,4.4,3.9,3.5,3.8,3.8,3.4,3.7,3.6,3.3,3.4,3,3.4,3.5,3.4,3.2,3.1,3.4,4.1,4.2,3.1,3.2,3.5,3.6,3,3.4,3.5,2.3,3.2,3.5,3.8,3,3.8,3.2,3.7,3.3,3.2,3.2,3.1,2.3,2.8,2.8,3.3,2.4,2.9,2.7,2,3,2.2,2.9,2.9,3.1,3,2.7,2.2,2.5,3.2,2.8,2.5,2.8,2.9,3,2.8,3,2.9,2.6,2.4,2.4,2.7,2.7,3,3.4,3.1,2.3,3,2.5,2.6,3,2.6,2.3,2.7,3,2.9,2.9,2.5,2.8,3.3,2.7,3,2.9,3,3,2.5,2.9,2.5,3.6,3.2,2.7,3,2.5,2.8,3.2,3,3.8,2.6,2.2,3.2,2.8,2.8,2.7,3.3,3.2,2.8,3,2.8,3,2.8,3.8,2.8,2.8,2.6,3,3.4,3.1,3,3.1,3.1,3.1,2.7,3.2,3.3,3,2.5,3,3.4,3;
        X.col(2) << 0.2,0.2,0.2,0.2,0.2,0.4,0.3,0.2,0.2,0.1,0.2,0.2,0.1,0.1,0.2,0.4,0.4,0.3,0.3,0.3,0.2,0.4,0.2,0.5,0.2,0.2,0.4,0.2,0.2,0.2,0.2,0.4,0.1,0.2,0.2,0.2,0.2,0.1,0.2,0.2,0.3,0.3,0.2,0.6,0.4,0.3,0.2,0.2,0.2,0.2,1.4,1.5,1.5,1.3,1.5,1.3,1.6,1,1.3,1.4,1,1.5,1,1.4,1.3,1.4,1.5,1,1.5,1.1,1.8,1.3,1.5,1.2,1.3,1.4,1.4,1.7,1.5,1,1.1,1,1.2,1.6,1.5,1.6,1.5,1.3,1.3,1.3,1.2,1.4,1.2,1,1.3,1.2,1.3,1.3,1.1,1.3,2.5,1.9,2.1,1.8,2.2,2.1,1.7,1.8,1.8,2.5,2,1.9,2.1,2,2.4,2.3,1.8,2.2,2.3,1.5,2.3,2,2,1.8,2.1,1.8,1.8,1.8,2.1,1.6,1.9,2,2.2,1.5,1.4,2.3,2.4,1.8,1.8,2.1,2.4,2.3,1.9,2.3,2.5,2.3,1.9,2,2.3,1.8;
        
        const auto r = Linear::linear(Y, X);
        
        REQUIRE(std::get<0>(r)(0) == Approx(1.3159173));
        REQUIRE(std::get<0>(r)(1) == Approx(-0.1659147));
        REQUIRE(std::get<0>(r)(2) == Approx(0.9933347));
        REQUIRE(std::get<1>(r) == 1);
        REQUIRE(std::get<2>(r));
    }
    
    SECTION("PerfectMulticollinearity")
    {
        Matrix Y(150, 1);
        Y << 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3;
        
        Matrix X(150, 3);
        X.col(0) << 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1;
        X.col(1) << 3.5,3,3.2,3.1,3.6,3.9,3.4,3.4,2.9,3.1,3.7,3.4,3,3,4,4.4,3.9,3.5,3.8,3.8,3.4,3.7,3.6,3.3,3.4,3,3.4,3.5,3.4,3.2,3.1,3.4,4.1,4.2,3.1,3.2,3.5,3.6,3,3.4,3.5,2.3,3.2,3.5,3.8,3,3.8,3.2,3.7,3.3,3.2,3.2,3.1,2.3,2.8,2.8,3.3,2.4,2.9,2.7,2,3,2.2,2.9,2.9,3.1,3,2.7,2.2,2.5,3.2,2.8,2.5,2.8,2.9,3,2.8,3,2.9,2.6,2.4,2.4,2.7,2.7,3,3.4,3.1,2.3,3,2.5,2.6,3,2.6,2.3,2.7,3,2.9,2.9,2.5,2.8,3.3,2.7,3,2.9,3,3,2.5,2.9,2.5,3.6,3.2,2.7,3,2.5,2.8,3.2,3,3.8,2.6,2.2,3.2,2.8,2.8,2.7,3.3,3.2,2.8,3,2.8,3,2.8,3.8,2.8,2.8,2.6,3,3.4,3.1,3,3.1,3.1,3.1,2.7,3.2,3.3,3,2.5,3,3.4,3;
        X.col(2) << 3.5,3,3.2,3.1,3.6,3.9,3.4,3.4,2.9,3.1,3.7,3.4,3,3,4,4.4,3.9,3.5,3.8,3.8,3.4,3.7,3.6,3.3,3.4,3,3.4,3.5,3.4,3.2,3.1,3.4,4.1,4.2,3.1,3.2,3.5,3.6,3,3.4,3.5,2.3,3.2,3.5,3.8,3,3.8,3.2,3.7,3.3,3.2,3.2,3.1,2.3,2.8,2.8,3.3,2.4,2.9,2.7,2,3,2.2,2.9,2.9,3.1,3,2.7,2.2,2.5,3.2,2.8,2.5,2.8,2.9,3,2.8,3,2.9,2.6,2.4,2.4,2.7,2.7,3,3.4,3.1,2.3,3,2.5,2.6,3,2.6,2.3,2.7,3,2.9,2.9,2.5,2.8,3.3,2.7,3,2.9,3,3,2.5,2.9,2.5,3.6,3.2,2.7,3,2.5,2.8,3.2,3,3.8,2.6,2.2,3.2,2.8,2.8,2.7,3.3,3.2,2.8,3,2.8,3,2.8,3.8,2.8,2.8,2.6,3,3.4,3.1,3,3.1,3.1,3.1,2.7,3.2,3.3,3,2.5,3,3.4,3;
        
        const auto r = Linear::linear(Y, X);
        
        REQUIRE(std::get<0>(r)(0) == Approx(4.4517480));
        REQUIRE(std::get<0>(r)(1) == Approx(-0.40096185));
        REQUIRE(std::get<0>(r)(2) == Approx(-0.40096185));
        REQUIRE(std::get<1>(r) == 1);
        REQUIRE(std::get<2>(r));
    }
    
    SECTION("HighMulticollinearity")
    {
        Matrix Y(150, 1);
        Y << 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3;
        
        Matrix X(150, 3);
        X.col(0) << 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1;
        X.col(1) << 3.5,3,3.2,3.1,3.6,3.9,3.4,3.4,2.9,3.1,3.7,3.4,3,3,4,4.4,3.9,3.5,3.8,3.8,3.4,3.7,3.6,3.3,3.4,3,3.4,3.5,3.4,3.2,3.1,3.4,4.1,4.2,3.1,3.2,3.5,3.6,3,3.4,3.5,2.3,3.2,3.5,3.8,3,3.8,3.2,3.7,3.3,3.2,3.2,3.1,2.3,2.8,2.8,3.3,2.4,2.9,2.7,2,3,2.2,2.9,2.9,3.1,3,2.7,2.2,2.5,3.2,2.8,2.5,2.8,2.9,3,2.8,3,2.9,2.6,2.4,2.4,2.7,2.7,3,3.4,3.1,2.3,3,2.5,2.6,3,2.6,2.3,2.7,3,2.9,2.9,2.5,2.8,3.3,2.7,3,2.9,3,3,2.5,2.9,2.5,3.6,3.2,2.7,3,2.5,2.8,3.2,3,3.8,2.6,2.2,3.2,2.8,2.8,2.7,3.3,3.2,2.8,3,2.8,3,2.8,3.8,2.8,2.8,2.6,3,3.4,3.1,3,3.1,3.1,3.1,2.7,3.2,3.3,3,2.5,3,3.4,3;
        X.col(2) << 3.72320352788895,2.71561668788058,3.65316451953862,3.03033551526463,3.75313069595085,3.76626436484425,3.45710033213837,3.63170386551724,3.09110973397199,2.99333690518217,3.96548242943713,3.4711009418233,3.08740871155287,2.67157734826662,3.88371168112843,4.85997602037046,4.01430435530917,3.54849367239842,4.08500691288525,3.7518605649019,3.32672876166864,3.65251110744677,3.61535394340933,3.45963240927914,3.47007172471107,2.6579827767588,3.35915627478061,3.54966140331742,3.4372734168298,3.06811111395086,2.90590760063702,3.32949794066344,3.67348956003247,4.15074626275266,3.19282499162808,3.17206226468747,3.75620583403574,3.28847877763661,3.05084878394083,3.04382352616087,3.82213412663923,2.10639543041919,3.5191459869059,3.6642667184709,3.75485231388437,2.97219174716241,3.74686458073195,3.17262621946433,3.81474624597413,3.19342506383233,3.28875213007149,2.79274792359524,2.70655853690513,1.93852919517909,2.75781466998384,2.64554782637769,3.38333070842818,2.45309987581396,3.00278900702014,2.73719359453032,2.08488854181308,2.99923344426659,2.18504037101631,3.00808079742749,2.91364472154643,3.08082100622723,3.11211147834039,2.75771270093743,2.27239742303511,2.57516687332877,2.85546917836722,2.6795871025178,2.81809313560928,2.86611864347884,2.92959109556609,3.02322303277759,2.73186529645544,3.20703818971684,3.28266268299216,2.29636631957695,2.57480949332983,2.04681914390377,2.61891756543657,2.8064747789105,2.94293353483864,3.12478287062177,2.88922893782496,2.16145745018127,3.1138948315327,2.7069668494297,2.56416131301487,3.07266281338725,2.87694444915079,2.15045219920526,2.41394424776561,2.84474996444167,2.47451790141155,2.64234371289316,2.5884146599524,2.67833186088623,2.83580389923543,3.1515352359458,2.8229079432294,2.89803558719053,3.00253952512171,2.51920589648438,2.84674948800139,2.93760549086001,2.47927494981917,3.66606331061315,3.11436989910224,2.72846091638007,3.29455480692711,2.40473400975508,2.67952580912133,3.07940931994374,2.75272715884074,3.7354506481901,2.57358671135304,2.55389965339076,3.10626377439817,3.03676421546126,2.90552754242504,2.49828059208972,2.99009938493481,3.2291315190936,2.6128013842403,3.29610372530825,2.96153073503714,2.91536656714866,2.49187380467814,3.9550461940534,2.77418940436645,2.90682859638532,2.60955296296101,3.2019505762219,3.57783564463639,3.19535134005527,3.10315413723503,3.09036282505869,3.21500937460157,2.74892109921999,2.70203308990074,3.08615133263946,3.40789217669128,2.84076966508734,2.87555934557018,2.808853435836,3.24985768410916,2.79573348630899;
        
        const auto r = Linear::linear(Y, X);

        REQUIRE(std::get<0>(r)(0) == Approx(4.4471406));
        REQUIRE(std::get<0>(r)(1) == Approx(-0.6394443));
        REQUIRE(std::get<0>(r)(2) == Approx(-0.1615273));
        REQUIRE(std::get<1>(r) == 1);
        REQUIRE(std::get<2>(r));
    }
    
    SECTION("StrongHeteroskedasticity")
    {
        Matrix Y(200, 1);
        Y << 0.936452802495364,4.42014048439836,4.33204936630964,3.04752761285109,0.72625905486571,11.6931588938264,10.9008691031426,15.2651464854493,17.0194334325787,-0.0406438370563986,1.28496061066915,19.7784422616491,9.56894344245429,19.8426546830053,18.6649164229123,21.0341794895232,27.5399894606328,20.0581399857723,23.4345246809699,22.1313214927899,20.4292848680708,25.580120685324,12.4391783722874,28.4306596628882,5.00845653914513,26.1034605552037,57.1148353145378,46.7165872704668,37.5003538432521,24.6848001426324,32.5624213739776,57.2086302017091,45.1038082555765,32.1723409536988,15.6419015208652,35.971543647533,41.9638377667688,65.4087656581695,46.9297170213703,30.8872570583811,31.2803032291616,19.5607672580685,39.9898813944439,69.0503446954823,36.0996847106359,50.0642546529368,67.9439579782193,55.0178729296246,48.9737755139355,43.908655677553,51.6261937501038,57.2456044359452,65.6963460592821,36.7404892347167,52.8515531471191,41.1253335675802,12.6799810036421,42.371856660479,97.0630582697818,41.7314136121405,42.845876935459,67.0938030371692,69.1782119378103,59.2038695887976,74.0997623766421,75.6434455503257,68.9316386766653,99.6613927193948,2.2364578016271,43.5631111684468,35.932945701534,50.7476183516864,67.8957692431731,18.9038480819516,100.750924965748,36.6582113141872,92.4897253753268,57.291865199541,39.8621464240185,74.6942485854045,52.2162830884743,49.8943687849695,148.108823795447,60.5075062517365,126.104197043748,70.0083115743487,142.740367954253,134.063511567693,67.1173344351692,77.7856564915157,88.0809434637099,74.7300552572775,111.349493449162,109.317926896709,135.175178260312,101.83465416843,103.301064501756,47.8097592774929,103.282559243758,145.674632991912,1.76446092414508,1.23026084248834,0.00225036293971792,0.342847754662406,-0.762324976165437,13.084106867726,11.1984150571806,13.4147842093067,14.7942504206061,7.24914755880546,12.399490864145,18.4642065100639,18.5845504741212,16.1530525104113,25.0987616034639,14.050458440441,13.6321750062633,16.7160608927497,1.98150180103804,26.1793331687095,13.3487333967338,12.5356085841397,31.3724459102202,17.6446725822137,31.9484093690033,16.6788309599145,19.4345657639294,-13.4142490436815,19.9250211721996,32.6111625096154,34.9402705481415,40.2169033931679,8.42910171418776,42.9905710212269,51.8209793485882,10.7125512135597,40.8472595958961,40.7562530989518,39.0088079501604,37.375827335651,31.479686841987,10.3385216421772,45.0718368047586,32.5599974341498,40.9046495200268,51.744928492218,43.2424555691874,22.7806632881741,61.0067055780572,42.2815405566751,54.2099528249292,29.9349651405387,41.8160696731457,27.7780559828181,36.8670008747582,32.6327358720983,25.9804365931526,41.6068495725288,92.2702251964424,57.8784328399638,60.7808437118896,55.484693856655,58.4976985612858,43.0581523251999,23.7045388094287,91.4104452263774,74.183491205688,93.9308172507262,43.9091822019959,69.0514297194521,93.8148055506464,74.2699745202783,72.4844088177838,102.385463959056,44.1554085542379,110.049823749353,62.409515081704,43.9582847017215,77.8862582882903,76.3527323090697,116.26446373598,80.5685097643559,102.755259802727,79.287446044522,110.386135921109,99.0586172795298,134.460768294205,94.2279124097513,54.6875421989682,107.329253674998,78.7484657092161,131.236088050303,126.806954485458,16.7979707798398,74.0576632353441,66.4708887718056,97.8253238454402,127.027324857153,52.5592040218182,134.330014246366;
        
        Matrix X(200, 2);
        X.col(0) << 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1;
        X.col(1) << 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100;

        const auto r = Linear::linear(Y, X);
        
        REQUIRE(std::get<0>(r)(0) == Approx(-1.0971411737));
        REQUIRE(std::get<0>(r)(1) == Approx(0.9980737122));
        REQUIRE(std::get<1>(r) == 1);
        REQUIRE(std::get<2>(r));
    }
    
    SECTION("UnnormalizedExplanatory_1")
    {
        Matrix Y(200, 1);
        Y << 0.936452802495364,4.42014048439836,4.33204936630964,3.04752761285109,0.72625905486571,11.6931588938264,10.9008691031426,15.2651464854493,17.0194334325787,-0.0406438370563986,1.28496061066915,19.7784422616491,9.56894344245429,19.8426546830053,18.6649164229123,21.0341794895232,27.5399894606328,20.0581399857723,23.4345246809699,22.1313214927899,20.4292848680708,25.580120685324,12.4391783722874,28.4306596628882,5.00845653914513,26.1034605552037,57.1148353145378,46.7165872704668,37.5003538432521,24.6848001426324,32.5624213739776,57.2086302017091,45.1038082555765,32.1723409536988,15.6419015208652,35.971543647533,41.9638377667688,65.4087656581695,46.9297170213703,30.8872570583811,31.2803032291616,19.5607672580685,39.9898813944439,69.0503446954823,36.0996847106359,50.0642546529368,67.9439579782193,55.0178729296246,48.9737755139355,43.908655677553,51.6261937501038,57.2456044359452,65.6963460592821,36.7404892347167,52.8515531471191,41.1253335675802,12.6799810036421,42.371856660479,97.0630582697818,41.7314136121405,42.845876935459,67.0938030371692,69.1782119378103,59.2038695887976,74.0997623766421,75.6434455503257,68.9316386766653,99.6613927193948,2.2364578016271,43.5631111684468,35.932945701534,50.7476183516864,67.8957692431731,18.9038480819516,100.750924965748,36.6582113141872,92.4897253753268,57.291865199541,39.8621464240185,74.6942485854045,52.2162830884743,49.8943687849695,148.108823795447,60.5075062517365,126.104197043748,70.0083115743487,142.740367954253,134.063511567693,67.1173344351692,77.7856564915157,88.0809434637099,74.7300552572775,111.349493449162,109.317926896709,135.175178260312,101.83465416843,103.301064501756,47.8097592774929,103.282559243758,145.674632991912,1.76446092414508,1.23026084248834,0.00225036293971792,0.342847754662406,-0.762324976165437,13.084106867726,11.1984150571806,13.4147842093067,14.7942504206061,7.24914755880546,12.399490864145,18.4642065100639,18.5845504741212,16.1530525104113,25.0987616034639,14.050458440441,13.6321750062633,16.7160608927497,1.98150180103804,26.1793331687095,13.3487333967338,12.5356085841397,31.3724459102202,17.6446725822137,31.9484093690033,16.6788309599145,19.4345657639294,-13.4142490436815,19.9250211721996,32.6111625096154,34.9402705481415,40.2169033931679,8.42910171418776,42.9905710212269,51.8209793485882,10.7125512135597,40.8472595958961,40.7562530989518,39.0088079501604,37.375827335651,31.479686841987,10.3385216421772,45.0718368047586,32.5599974341498,40.9046495200268,51.744928492218,43.2424555691874,22.7806632881741,61.0067055780572,42.2815405566751,54.2099528249292,29.9349651405387,41.8160696731457,27.7780559828181,36.8670008747582,32.6327358720983,25.9804365931526,41.6068495725288,92.2702251964424,57.8784328399638,60.7808437118896,55.484693856655,58.4976985612858,43.0581523251999,23.7045388094287,91.4104452263774,74.183491205688,93.9308172507262,43.9091822019959,69.0514297194521,93.8148055506464,74.2699745202783,72.4844088177838,102.385463959056,44.1554085542379,110.049823749353,62.409515081704,43.9582847017215,77.8862582882903,76.3527323090697,116.26446373598,80.5685097643559,102.755259802727,79.287446044522,110.386135921109,99.0586172795298,134.460768294205,94.2279124097513,54.6875421989682,107.329253674998,78.7484657092161,131.236088050303,126.806954485458,16.7979707798398,74.0576632353441,66.4708887718056,97.8253238454402,127.027324857153,52.5592040218182,134.330014246366;
        
        Matrix X(200, 2);
        X.col(1) << 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100;
        X = 10 * X;
        X.col(0) << 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1;

        const auto r = Linear::linear(Y, X);
        
        REQUIRE(std::get<0>(r)(0) == Approx(-1.0971411737));
        REQUIRE(std::get<0>(r)(1) == Approx(0.0998073712));
        REQUIRE(std::get<1>(r) == 1);
        REQUIRE(std::get<2>(r));
    }
    
    SECTION("UnnormalizedExplanatory_2")
    {
        Matrix Y(150, 1);
        Y << 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3;
        
        Matrix X(150, 3);
        X.col(0) << 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1;
        X.col(1) << 35,30,32,31,36,39,34,34,29,31,37,34,30,30,40,44,39,35,38,38,34,37,36,33,34,30,34,35,34,32,31,34,41,42,31,32,35,36,30,34,35,23,32,35,38,30,38,32,37,33,32,32,31,23,28,28,33,24,29,27,20,30,22,29,29,31,30,27,22,25,32,28,25,28,29,30,28,30,29,26,24,24,27,27,30,34,31,23,30,25,26,30,26,23,27,30,29,29,25,28,33,27,30,29,30,30,25,29,25,36,32,27,30,25,28,32,30,38,26,22,32,28,28,27,33,32,28,30,28,30,28,38,28,28,26,30,34,31,30,31,31,31,27,32,33,30,25,30,34,30;
        X.col(2) << 2,2,2,2,2,4,3,2,2,1,2,2,1,1,2,4,4,3,3,3,2,4,2,5,2,2,4,2,2,2,2,4,1,2,2,2,2,1,2,2,3,3,2,6,4,3,2,2,2,2,14,15,15,13,15,13,16,10,13,14,10,15,10,14,13,14,15,10,15,11,18,13,15,12,13,14,14,17,15,10,11,10,12,16,15,16,15,13,13,13,12,14,12,10,13,12,13,13,11,13,25,19,21,18,22,21,17,18,18,25,20,19,21,20,24,23,18,22,23,15,23,20,20,18,21,18,18,18,21,16,19,20,22,15,14,23,24,18,18,21,24,23,19,23,25,23,19,20,23,18;
        
        const auto r = Linear::linear(Y, X);
        
        REQUIRE(std::get<0>(r)(0) == Approx(1.3159172576));
        REQUIRE(std::get<0>(r)(1) == Approx(-0.0165914736));
        REQUIRE(std::get<0>(r)(2) == Approx(0.0993334681));
        REQUIRE(std::get<1>(r) == 1);
        REQUIRE(std::get<2>(r));
    }

    SECTION("BinaryResponse")
    {
        Matrix Y(150, 1);
        Y << 0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1;
        
        Matrix X(150, 3);
        X.col(0) << 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1;
        X.col(1) << 3.5,3,3.2,3.1,3.6,3.9,3.4,3.4,2.9,3.1,3.7,3.4,3,3,4,4.4,3.9,3.5,3.8,3.8,3.4,3.7,3.6,3.3,3.4,3,3.4,3.5,3.4,3.2,3.1,3.4,4.1,4.2,3.1,3.2,3.5,3.6,3,3.4,3.5,2.3,3.2,3.5,3.8,3,3.8,3.2,3.7,3.3,3.2,3.2,3.1,2.3,2.8,2.8,3.3,2.4,2.9,2.7,2,3,2.2,2.9,2.9,3.1,3,2.7,2.2,2.5,3.2,2.8,2.5,2.8,2.9,3,2.8,3,2.9,2.6,2.4,2.4,2.7,2.7,3,3.4,3.1,2.3,3,2.5,2.6,3,2.6,2.3,2.7,3,2.9,2.9,2.5,2.8,3.3,2.7,3,2.9,3,3,2.5,2.9,2.5,3.6,3.2,2.7,3,2.5,2.8,3.2,3,3.8,2.6,2.2,3.2,2.8,2.8,2.7,3.3,3.2,2.8,3,2.8,3,2.8,3.8,2.8,2.8,2.6,3,3.4,3.1,3,3.1,3.1,3.1,2.7,3.2,3.3,3,2.5,3,3.4,3;
        X.col(2) << 3.72320352788895,2.71561668788058,3.65316451953862,3.03033551526463,3.75313069595085,3.76626436484425,3.45710033213837,3.63170386551724,3.09110973397199,2.99333690518217,3.96548242943713,3.4711009418233,3.08740871155287,2.67157734826662,3.88371168112843,4.85997602037046,4.01430435530917,3.54849367239842,4.08500691288525,3.7518605649019,3.32672876166864,3.65251110744677,3.61535394340933,3.45963240927914,3.47007172471107,2.6579827767588,3.35915627478061,3.54966140331742,3.4372734168298,3.06811111395086,2.90590760063702,3.32949794066344,3.67348956003247,4.15074626275266,3.19282499162808,3.17206226468747,3.75620583403574,3.28847877763661,3.05084878394083,3.04382352616087,3.82213412663923,2.10639543041919,3.5191459869059,3.6642667184709,3.75485231388437,2.97219174716241,3.74686458073195,3.17262621946433,3.81474624597413,3.19342506383233,3.28875213007149,2.79274792359524,2.70655853690513,1.93852919517909,2.75781466998384,2.64554782637769,3.38333070842818,2.45309987581396,3.00278900702014,2.73719359453032,2.08488854181308,2.99923344426659,2.18504037101631,3.00808079742749,2.91364472154643,3.08082100622723,3.11211147834039,2.75771270093743,2.27239742303511,2.57516687332877,2.85546917836722,2.6795871025178,2.81809313560928,2.86611864347884,2.92959109556609,3.02322303277759,2.73186529645544,3.20703818971684,3.28266268299216,2.29636631957695,2.57480949332983,2.04681914390377,2.61891756543657,2.8064747789105,2.94293353483864,3.12478287062177,2.88922893782496,2.16145745018127,3.1138948315327,2.7069668494297,2.56416131301487,3.07266281338725,2.87694444915079,2.15045219920526,2.41394424776561,2.84474996444167,2.47451790141155,2.64234371289316,2.5884146599524,2.67833186088623,2.83580389923543,3.1515352359458,2.8229079432294,2.89803558719053,3.00253952512171,2.51920589648438,2.84674948800139,2.93760549086001,2.47927494981917,3.66606331061315,3.11436989910224,2.72846091638007,3.29455480692711,2.40473400975508,2.67952580912133,3.07940931994374,2.75272715884074,3.7354506481901,2.57358671135304,2.55389965339076,3.10626377439817,3.03676421546126,2.90552754242504,2.49828059208972,2.99009938493481,3.2291315190936,2.6128013842403,3.29610372530825,2.96153073503714,2.91536656714866,2.49187380467814,3.9550461940534,2.77418940436645,2.90682859638532,2.60955296296101,3.2019505762219,3.57783564463639,3.19535134005527,3.10315413723503,3.09036282505869,3.21500937460157,2.74892109921999,2.70203308990074,3.08615133263946,3.40789217669128,2.84076966508734,2.87555934557018,2.808853435836,3.24985768410916,2.79573348630899;

        const auto r = Linear::linear(Y, X);
        
        REQUIRE(std::get<0>(r)(0) == Approx(0.5422154));
        REQUIRE(std::get<0>(r)(1) == Approx(0.3980301));
        REQUIRE(std::get<0>(r)(2) == Approx(-0.4132578));
        REQUIRE(std::get<1>(r) == 1);
        REQUIRE(std::get<2>(r));
    }

    SECTION("IncompatibleMatrix")
    {
        Matrix Y(150, 1);
        Matrix X(50, 3);        
        REQUIRE_THROWS(Linear::linear(Y, X));
    }
    
    SECTION("PerfectFit")
    {
        Matrix Y(100, 1);
        Y << 2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,200;
        
        Matrix X(100, 3);
        X.col(0) << 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1;
        X.col(1) << 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100;
        
        const auto r = Linear::linear(Y, X);
        
        //const auto x1 = std::isnan(std::get<0>(r)(0)) || std::get<0>(r)(0) == Approx(-2.29851e-17);
        const auto x2 = std::isnan(std::get<0>(r)(1)) || std::get<0>(r)(1) == Approx(2.0);

        //REQUIRE(x1);
        REQUIRE(x2);
        REQUIRE(std::get<1>(r) == 1);
        REQUIRE(std::get<2>(r));
    }

    SECTION("MarkPython1")
    {
		Matrix Y(20, 1);
		Y << 3.03,1.54,1.38,2.44,1.68,3.75,3.00,1.15,2.74,2.96,2.72,4.98,1.62,1.47,1.44,3.41,0.51,2.06,2.46,3.22;

        Matrix X(20, 4);
		X.col(0) << 1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0;
		X.col(1) << 2,0,0,1,0,2,0,0,0,2,0,2,0,0,0,1,0,0,0,1;
		X.col(2) << -1.21, 0.28, 1.08,-2.35, 0.43, 0.51,-0.57, 0.55,-0.56,-0.89, -0.48,-1.00,-0.78, 0.06, 0.96,-0.11,-0.51,-0.91,-0.84, 2.42;
		X.col(3) << 10.27, 9.02, 9.12,10.92, 8.61, 7.10,11.15, 7.95, 9.97, 8.13, 12.20, 9.05, 8.58, 9.00, 6.74, 7.66, 5.64, 7.32, 9.41, 9.07;
	
		const auto r = Linear::linear(Y, X);

		REQUIRE(std::get<0>(r)(0) == Approx(-0.27315216));
		REQUIRE(std::get<0>(r)(1) == Approx(0.98352191));
		REQUIRE(std::get<0>(r)(2) == Approx(0.08233523));
		REQUIRE(std::get<0>(r)(3) == Approx(0.24038809));
        REQUIRE(std::get<1>(r) == 1);
        REQUIRE(std::get<2>(r));
	}
    
    SECTION("MarkPython2")
    {
        Matrix Y(20, 1);
        Y << 3.03,1.54,1.38,2.44,1.68,3.75,3.00,1.15,2.74,2.96,2.72,4.98,1.62,1.47,1.44,3.41,0.51,2.06,2.46,3.22;
        
        Matrix X(20, 4);
        X.col(0) << 1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0;
        X.col(1) << 2,0,0,1,0,2,0,0,0,2,0,2,0,0,0,1,0,0,0,1;
        X.col(2) << -1.21, 0.28, 1.08,-2.35, 0.43, 0.51,-0.57, 0.55,-0.56,-0.89, -0.48,-1.00,-0.78, 0.06, 0.96,-0.11,-0.51,-0.91,-0.84, 2.42;
        X.col(3) << 10.27, 9.02, 9.12,10.92, 8.61, 7.10,11.15, 7.95, 9.97, 8.13, 12.20, 9.05, 8.58, 9.00, 6.74, 7.66, 5.64, 7.32, 9.41, 9.07;
        
        const auto r = _gt_statistic<Linear>(Y, X);
        
        REQUIRE(std::get<0>(r) == Approx(0.98352191));
        REQUIRE(std::get<1>(r) == 1);
        REQUIRE(std::get<2>(r) == 1);
    }
    
    SECTION("MarkPython3")
    {
        Matrix Y(20, 1);
        Y << 3.03,1.54,1.38,2.44,1.68,3.75,3.00,1.15,2.74,2.96,2.72,4.98,1.62,1.47,1.44,3.41,0.51,2.06,2.46,3.22;
        
        Matrix X(20, 4);
        X.col(0) << 1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0;
        X.col(1) << 2,0,0,1,0,2,0,0,0,2,0,2,0,0,0,1,0,0,0,1;
        X.col(2) << -1.21, 0.28, 1.08,-2.35, 0.43, 0.51,-0.57, 0.55,-0.56,-0.89, -0.48,-1.00,-0.78, 0.06, 0.96,-0.11,-0.51,-0.91,-0.84, 2.42;
        X.col(3) << 10.27, 9.02, 9.12,10.92, 8.61, 7.10,11.15, 7.95, 9.97, 8.13, 12.20, 9.05, 8.58, 9.00, 6.74, 7.66, 5.64, 7.32, 9.41, 9.07;
        
        const std::vector<double> t { 0.12583021765778282,
                                     -0.485403516503356,
                                     -0.34089564663914207,
                                      0.78370215821253963,
                                      0.39990551482190395,
                                      0.28653060045127893,
                                     -0.20588987263178385,
                                     -0.34739846028475552,
                                      0.15919327942548844,
                                     -0.27064648207495279 };

        const auto r = _gt_statistic_null<Linear>(Y, X, 10, 3141, 5926, 5358);

        for (auto i = 0; i < t.size(); i++)
        {
            REQUIRE(std::get<0>(r[i]) == Approx(t[i]));
        }
    }
}

TEST_CASE("LogisticTest")
{
    SECTION("MarkPython1")
    {
        Matrix Y(20,1);
        Y << 0,1,0,0,0,0,1,0,0,1,1,1,1,0,0,0,0,0,1,0;

        Matrix X(20,4);
        X.col(0) << 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1;
        X.col(1) << 2,0,0,1,0,2,0,0,0,2,0,2,0,0,0,1,0,0,0,1;
        X.col(2) << -1.21,0.28,1.08,-2.35,0.43,0.51,-0.57,0.55,-0.56,-0.89,-0.48,-1.00,-0.78,0.06,0.96,-0.11,-0.51,-0.91,-0.84,2.42;
        X.col(3) << 10.27,9.02,9.12,10.92,8.61,7.10,11.15,7.95,9.97,8.13,12.20,9.05,8.58,9.00,6.74,7.66,5.64,7.32,9.41,9.07;

		const auto r = Logistic::logistic(Y, X);
		
        REQUIRE(std::get<0>(r)(0,0) == Approx(-5.02086844));
		REQUIRE(std::get<0>(r)(1,0) == Approx(-0.05464706));
        REQUIRE(std::get<0>(r)(2,0) == Approx(-0.50962527));
        REQUIRE(std::get<0>(r)(3,0) == Approx(0.47627277));
        REQUIRE(std::get<1>(r) > 1);
        REQUIRE(std::get<1>(r) < 100);
		REQUIRE(std::get<2>(r));
	}

    SECTION("MarkPython2")
    {
        Matrix Y(20,1);
        Y << 0,1,0,0,0,0,1,0,0,1,1,1,1,0,0,0,0,0,1,0;
        
        Matrix X(20,4);
        X.col(0) << 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1;
        X.col(1) << 2,0,0,1,0,2,0,0,0,2,0,2,0,0,0,1,0,0,0,1;
        X.col(2) << -1.21,0.28,1.08,-2.35,0.43,0.51,-0.57,0.55,-0.56,-0.89,-0.48,-1.00,-0.78,0.06,0.96,-0.11,-0.51,-0.91,-0.84,2.42;
        X.col(3) << 10.27,9.02,9.12,10.92,8.61,7.10,11.15,7.95,9.97,8.13,12.20,9.05,8.58,9.00,6.74,7.66,5.64,7.32,9.41,9.07;
        
        const auto r = _gt_statistic<Logistic>(Y, X);
        
        REQUIRE(std::get<0>(r) == Approx(-0.05464706));
        REQUIRE(std::get<1>(r) > 1);
        REQUIRE(std::get<1>(r) < 100);
        REQUIRE(std::get<2>(r));
    }

    SECTION("MarkPython3")
    {
        Matrix Y(20,1);
        Y << 0,1,0,0,0,0,1,0,0,1,1,1,1,0,0,0,0,0,1,0;

        Matrix X(20,4);
        X.col(0) << 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1;
        X.col(1) << 2,0,0,1,0,2,0,0,0,2,0,2,0,0,0,1,0,0,0,1;
        X.col(2) << -1.21,0.28,1.08,-2.35,0.43,0.51,-0.57,0.55,-0.56,-0.89,-0.48,-1.00,-0.78,0.06,0.96,-0.11,-0.51,-0.91,-0.84,2.42;
        X.col(3) << 10.27,9.02,9.12,10.92,8.61,7.10,11.15,7.95,9.97,8.13,12.20,9.05,8.58,9.00,6.74,7.66,5.64,7.32,9.41,9.07;

        const std::vector<double> t { 1.0208944625064305,
                                      0.050515712156318192,
                                     -0.60811129861988245,
                                      0.37985865402031704,
                                     -0.18894074357840906,
                                      0.44457783462177508,
                                      0.56457955118766612,
                                     -0.22000464054707705,
                                      1.5803502449373148,
                                     -0.62423258680567528 };
        
        const auto r = _gt_statistic_null<Logistic>(Y, X, 10, 3141, 5926, 5358);
        
        for (auto i = 0; i < t.size(); i++)
        {
            REQUIRE(std::get<0>(r[i]) == Approx(t[i]));
        }
    }

    SECTION("UnnormalizedExplanatory")
    {
        Matrix Y(20,1);
        Y << 0,1,0,0,0,0,1,0,0,1,1,1,1,0,0,0,0,0,1,0;
        
        Matrix X(20,4);
        X.col(0) << 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1;
        X.col(1) << 20,0,0,10,0,20,0,0,0,20,0,20,0,0,0,10,0,0,0,10;
        X.col(2) << -12.1,2.8,10.8,-23.5,4.3,5.1,-5.7,5.5,-5.6,-8.9,-4.8,-10,-7.8,0.6,9.6,-1.1,-5.1,-9.1,-8.4,24.2;
        X.col(3) << 102.7,90.2,91.2,109.2,86.1,71,111.5,79.5,99.7,81.3,122,90.5,85.8,90,67.4,76.6,56.4,73.2,94.1,90.7;
        
        const auto r = Logistic::logistic(Y, X);
        
        REQUIRE(std::get<0>(r)(0,0) == Approx(-5.02086844185));
        REQUIRE(std::get<0>(r)(1,0) == Approx(-0.00546470646));
        REQUIRE(std::get<0>(r)(2,0) == Approx(-0.05096252664));
        REQUIRE(std::get<0>(r)(3,0) == Approx(0.04762727662));
        REQUIRE(std::get<1>(r) > 1);
        REQUIRE(std::get<1>(r) < 100);
        REQUIRE(std::get<2>(r));
    }

    SECTION("IdreFromR")
    {
        Matrix Y(400,1);
        Y << 0,1,1,1,0,1,1,0,1,0,0,0,1,0,1,0,0,0,0,1,0,1,0,0,1,1,1,1,1,0,0,0,0,1,0,0,0,0,1,1,0,1,1,0,0,1,1,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0,1,0,1,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,0,1,0,1,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,0,0,0,1,1,0,1,1,0,1,0,0,0,0,0,0,1,1,0,1,0,1,0,0,1,0,0,1,0,0,0,1,0,0,0,0,1,0,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,0,0,0,0,1,1,1,0,0,1,1,0,1,0,1,0,0,1,0,1,1,1,0,0,0,0,1,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,1,0,0,0,0,0,0,1,0,1,1,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,1,0,1,0,1,1,0,0,1,0,1,1,0,0,1,0,0,0,0,0,1,1,1,1,0,0,0,1,0,0,0,1,0,0,1,0,1,0,0,0,1,1,1,1,1,0,0,0,0,0;
        
        Matrix X(400,4);
        X.col(0) << 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1;
        X.col(1) << 380,660,800,640,520,760,560,400,540,700,800,440,760,700,700,480,780,360,800,540,500,660,600,680,760,800,620,520,780,520,540,760,600,800,360,400,580,520,500,520,560,580,600,500,700,460,580,500,440,400,640,440,740,680,660,740,560,380,400,600,620,560,640,680,580,600,740,620,580,800,640,300,480,580,720,720,560,800,540,620,700,620,500,380,500,520,600,600,700,660,700,720,800,580,660,660,640,480,700,400,340,580,380,540,660,740,700,480,400,480,680,420,360,600,720,620,440,700,800,340,520,480,520,500,720,540,600,740,540,460,620,640,580,500,560,500,560,700,620,600,640,700,620,580,580,380,480,560,480,740,800,400,640,580,620,580,560,480,660,700,600,640,700,520,580,700,440,720,500,600,400,540,680,800,500,620,520,620,620,300,620,500,700,540,500,800,560,580,560,500,640,800,640,380,600,560,660,400,600,580,800,580,700,420,600,780,740,640,540,580,740,580,460,640,600,660,340,460,460,560,540,680,480,800,800,720,620,540,480,720,580,600,380,420,800,620,660,480,500,700,440,520,680,620,540,800,680,440,680,640,660,620,520,540,740,640,520,620,520,640,680,440,520,620,520,380,560,600,680,500,640,540,680,660,520,600,460,580,680,660,660,360,660,520,440,600,800,660,800,420,620,800,680,800,480,520,560,460,540,720,640,660,400,680,220,580,540,580,540,440,560,660,660,520,540,300,340,780,480,540,460,460,500,420,520,680,680,560,580,500,740,660,420,560,460,620,520,620,540,660,500,560,500,580,520,500,600,580,400,620,780,620,580,700,540,760,700,720,560,720,520,540,680,460,560,480,460,620,580,800,540,680,680,620,560,560,620,800,640,540,700,540,540,660,480,420,740,580,640,640,800,660,600,620,460,620,560,460,700,600;
        X.col(2) << 3.61,3.67,4,3.19,2.93,3,2.98,3.08,3.39,3.92,4,3.22,4,3.08,4,3.44,3.87,2.56,3.75,3.81,3.17,3.63,2.82,3.19,3.35,3.66,3.61,3.74,3.22,3.29,3.78,3.35,3.4,4,3.14,3.05,3.25,2.9,3.13,2.68,2.42,3.32,3.15,3.31,2.94,3.45,3.46,2.97,2.48,3.35,3.86,3.13,3.37,3.27,3.34,4,3.19,2.94,3.65,2.82,3.18,3.32,3.67,3.85,4,3.59,3.62,3.3,3.69,3.73,4,2.92,3.39,4,3.45,4,3.36,4,3.12,4,2.9,3.07,2.71,2.91,3.6,2.98,3.32,3.48,3.28,4,3.83,3.64,3.9,2.93,3.44,3.33,3.52,3.57,2.88,3.31,3.15,3.57,3.33,3.94,3.95,2.97,3.56,3.13,2.93,3.45,3.08,3.41,3,3.22,3.84,3.99,3.45,3.72,3.7,2.92,3.74,2.67,2.85,2.98,3.88,3.38,3.54,3.74,3.19,3.15,3.17,2.79,3.4,3.08,2.95,3.57,3.33,4,3.4,3.58,3.93,3.52,3.94,3.4,3.4,3.43,3.4,2.71,2.91,3.31,3.74,3.38,3.94,3.46,3.69,2.86,2.52,3.58,3.49,3.82,3.13,3.5,3.56,2.73,3.3,4,3.24,3.77,4,3.62,3.51,2.81,3.48,3.43,3.53,3.37,2.62,3.23,3.33,3.01,3.78,3.88,4,3.84,2.79,3.6,3.61,2.88,3.07,3.35,2.94,3.54,3.76,3.59,3.47,3.59,3.07,3.23,3.63,3.77,3.31,3.2,4,3.92,3.89,3.8,3.54,3.63,3.16,3.5,3.34,3.02,2.87,3.38,3.56,2.91,2.9,3.64,2.98,3.59,3.28,3.99,3.02,3.47,2.9,3.5,3.58,3.02,3.43,3.42,3.29,3.28,3.38,2.67,3.53,3.05,3.49,4,2.86,3.45,2.76,3.81,2.96,3.22,3.04,3.91,3.34,3.17,3.64,3.73,3.31,3.21,4,3.55,3.52,3.35,3.3,3.95,3.51,3.81,3.11,3.15,3.19,3.95,3.9,3.34,3.24,3.64,3.46,2.81,3.95,3.33,3.67,3.32,3.12,2.98,3.77,3.58,3,3.14,3.94,3.27,3.45,3.1,3.39,3.31,3.22,3.7,3.15,2.26,3.45,2.78,3.7,3.97,2.55,3.25,3.16,3.07,3.5,3.4,3.3,3.6,3.15,3.98,2.83,3.46,3.17,3.51,3.13,2.98,4,3.67,3.77,3.65,3.46,2.84,3,3.63,3.71,3.28,3.14,3.58,3.01,2.69,2.7,3.9,3.31,3.48,3.34,2.93,4,3.59,2.96,3.43,3.64,3.71,3.15,3.09,3.2,3.47,3.23,2.65,3.95,3.06,3.35,3.03,3.35,3.8,3.36,2.85,4,3.43,3.12,3.52,3.78,2.81,3.27,3.31,3.69,3.94,4,3.49,3.14,3.44,3.36,2.78,2.93,3.63,4,3.89,3.77,3.76,2.42,3.37,3.78,3.49,3.63,4,3.12,2.7,3.65,3.49,3.51,4,2.62,3.02,3.86,3.36,3.17,3.51,3.05,3.88,3.38,3.75,3.99,4,3.04,2.63,3.65,3.89;
        X.col(3) << 3,3,1,4,4,2,1,2,3,2,4,1,1,2,1,3,4,3,2,1,3,2,4,4,2,1,1,4,2,1,4,3,3,3,1,2,1,3,2,3,2,2,2,3,2,3,2,4,4,3,3,4,4,2,3,3,3,3,2,4,2,4,3,3,3,2,4,1,1,1,3,4,4,2,4,3,3,3,1,1,4,2,2,4,3,2,2,2,1,2,2,1,2,2,2,2,4,2,2,3,3,3,4,3,2,2,1,2,3,2,4,4,3,1,3,3,2,2,1,3,2,2,3,3,3,4,1,4,2,4,2,2,2,3,2,3,4,3,2,1,2,4,4,3,4,3,2,3,1,1,1,2,2,3,3,4,2,1,2,3,2,2,2,2,2,1,4,3,3,3,3,3,3,2,4,2,2,3,3,3,3,4,2,2,4,2,3,2,2,2,2,3,3,4,2,2,3,4,3,4,3,2,1,4,1,3,1,1,3,2,4,2,2,3,2,3,1,1,1,2,3,3,1,3,2,3,2,4,2,2,4,3,2,3,1,2,2,2,4,3,2,1,3,2,1,3,2,2,3,3,4,4,2,4,4,3,2,3,2,2,2,2,3,3,3,3,4,3,2,3,2,3,2,1,2,2,3,1,4,2,2,3,4,4,2,4,1,4,4,4,2,2,2,1,1,3,1,2,2,3,2,3,2,2,3,4,1,2,2,3,3,2,3,4,4,2,2,4,4,1,3,2,4,2,3,1,2,2,2,4,3,3,1,3,3,1,3,4,1,3,4,3,4,2,3,3,2,2,2,2,2,3,3,2,2,1,2,1,3,3,1,1,2,2,1,3,3,3,1,2,2,3,1,1,2,4,2,2,3,2,2,2,2,1,2,1,2,2,2,2,2,2,3,2,3,2,3,2,2,3;

        const auto r1 = Logistic::logistic(Y, X);
        REQUIRE(std::get<0>(r1)(0,0) == Approx(-3.44954840));
        REQUIRE(std::get<0>(r1)(1,0) == Approx(0.00229396));
        REQUIRE(std::get<0>(r1)(2,0) == Approx(0.77701357));
        REQUIRE(std::get<0>(r1)(3,0) == Approx(-0.56003139));
        REQUIRE(std::get<1>(r1) > 1);
        REQUIRE(std::get<1>(r1) < 100);
        REQUIRE(std::get<2>(r1));
        
        const auto r2 = _gt_statistic<Logistic>(Y, X);
        REQUIRE(std::get<0>(r2) == Approx(0.00229396));
        REQUIRE(std::get<1>(r2) > 1);
        REQUIRE(std::get<1>(r2) < 100);
        REQUIRE(std::get<2>(r2));
    }
    
    SECTION("InvalidResponse")
    {
        Matrix Y(20, 1);
        Y << 0,2,0,0,0,0,1,0,0,1,1,1,1,0,0,0,0,0,1,0;
        
        Matrix X(20,4);
        X.col(0) << 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1;
        X.col(1) << 2,0,0,1,0,2,0,0,0,2,0,2,0,0,0,1,0,0,0,1;
        X.col(2) << -1.21,0.28,1.08,-2.35,0.43,0.51,-0.57,0.55,-0.56,-0.89,-0.48,-1.00,-0.78,0.06,0.96,-0.11,-0.51,-0.91,-0.84,2.42;
        X.col(3) << 10.27,9.02,9.12,10.92,8.61,7.10,11.15,7.95,9.97,8.13,12.20,9.05,8.58,9.00,6.74,7.66,5.64,7.32,9.41,9.07;
        
        REQUIRE_THROWS(Logistic::solve(Y, X));
        REQUIRE_THROWS(_gt_statistic<Logistic>(Y, X));
        REQUIRE_THROWS(_gt_statistic_null<Logistic>(Y, X, 10, 3141, 5926, 5358));
    }
    
    SECTION("PerfectFit")
    {
        Matrix Y(6, 1);
        Y << 1,1,1,0,0,0;
        
        Matrix X(6,2);
        X.col(0) << 1,1,1,1,1,1;
        X.col(1) << 1,2,3,4,5,6;

        const auto r = Logistic::logistic(Y, X);
        
        /*
         * The values don't match R as it breaks down approaching perfect fitting
         */
        
        REQUIRE(std::get<0>(r)(0,0) == Approx(107.22585766));
        REQUIRE(std::get<0>(r)(1,0) == Approx(-30.63595933));
        REQUIRE(std::get<1>(r) > 1);
        REQUIRE(std::get<1>(r) < 100);
        REQUIRE(std::get<2>(r));
    }
    
    SECTION("CloseToPerfectFit")
    {
        Matrix Y(6, 1);
        Y << 1,1,1,0,0,0;
        
        Matrix X(6,2);
        X.col(0) << 1,1,1,1,1,1;
        X.col(1) << 100,129,100,170,180,130;
        
        const auto r = Logistic::logistic(Y, X);

        /*
         * The values don't match R as it breaks down approaching perfect fitting
         */

        REQUIRE(std::get<0>(r)(0,0) == Approx(4090.25));
        REQUIRE(std::get<0>(r)(1,0) == Approx(-31.585));
        REQUIRE(std::get<1>(r) > 1);
        REQUIRE(std::get<1>(r) < 100);
        REQUIRE(std::get<2>(r));
    }

    SECTION("ExampleFromInternet")
    {
        Matrix Y(32,1);
        Y << 0,0,1,1,0,1,0,1,1,1,1,0,0,0,0,0,0,1,1,1,1,0,0,0,0,1,0,1,0,0,0,1;
        
        Matrix X(32,2);
        X.col(0) << 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1;
        X.col(1) << 21,21,22.8,21.4,18.7,18.1,14.3,24.4,22.8,19.2,17.8,16.4,17.3,15.2,10.4,10.4,14.7,32.4,30.4,33.9,21.5,15.5,15.2,13.3,19.2,27.3,26,30.4,15.8,19.7,15,21.4;

        const auto r = Logistic::logistic(Y, X);
        
        REQUIRE(std::get<0>(r)(0,0) == Approx(-8.83307258));
        REQUIRE(std::get<0>(r)(1,0) == Approx(0.43041352));
        REQUIRE(std::get<1>(r) > 1);
        REQUIRE(std::get<1>(r) < 100);
        REQUIRE(std::get<2>(r));
    }
    
    SECTION("PerfectSeparation")
    {
        Matrix Y(10,1);
        Y << 0,0,0,0,0,1,1,1,1,1;
        
        Matrix X(10,2);
        X.col(0) << 1,1,1,1,1,1,1,1,1,1;
        X.col(1) << -0.426165577414356,-0.355001838033406,-0.276047773214867,0.0874874238042033,0.833733170755138,0.834460129133672,1.16823174338441,1.31241550858861,2.25225573054322,2.50264540789068;

        const auto r = Logistic::logistic(Y, X);
        
        /*
         * The values don't match R as it breaks down approaching perfect separation
         */

        REQUIRE(std::get<0>(r)(0,0) == Approx(-7516.24));
        REQUIRE(std::get<0>(r)(1,0) == Approx(9011.23));
        REQUIRE(std::get<1>(r) > 1);
        REQUIRE(std::get<1>(r) < 100);
        REQUIRE(std::get<2>(r));
    }
    
    SECTION("CloseToPerfectSeparation")
    {
        Matrix Y(10,1);
        Y << 0,0,0,0,0,1,1,1,1,1;
        
        Matrix X(10,2);
        X.col(0) << 1,1,1,1,1,1,1,1,1,1;
        X.col(1) << -0.426165577414356,3.0,-0.276047773214867,0.0874874238042033,0.833733170755138,0.834460129133672,1.16823174338441,1.31241550858861,2.25225573054322,2.50264540789068;
        
        const auto r = Logistic::logistic(Y, X);
        
        REQUIRE(std::get<0>(r)(0,0) == Approx(-1.004731669));
        REQUIRE(std::get<0>(r)(1,0) == Approx(0.903595383));
        REQUIRE(std::get<1>(r) > 1);
        REQUIRE(std::get<1>(r) < 100);
        REQUIRE(std::get<2>(r));
    }
}

TEST_CASE("FirthTest")
{
    SECTION("MarkPython1")
    {
        Matrix Y(20,1);
        Y << 1,0,0,1,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0;

        Matrix X(20,4);
        X.col(0) << 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1;
        X.col(1) << 2,0,0,1,0,2,0,0,0,2,0,2,0,0,0,1,0,0,0,1;
        X.col(2) << -1.21,0.28,1.08,-2.35,0.43,0.51,-0.57,0.55,-0.56,-0.89,-0.48,-1.00,-0.78,0.06,0.96,-0.11,-0.51,-0.91,-0.84,2.42;
        X.col(3) << 10.27,9.02,9.12,10.92,8.61,7.10,11.15,7.95,9.97,8.13,12.20,9.05,8.58,9.00,6.74,7.66,5.64,7.32,9.41,9.07;

        const auto r1 = Firth::firth(Y, X);
		REQUIRE(std::get<0>(r1)(1,0) == Approx(2.6957997));
        REQUIRE(std::get<1>(r1) > 1);
        REQUIRE(std::get<1>(r1) < 100);
        REQUIRE(std::get<2>(r1));

        const auto r2 = Firth::solve(Y, X);
        REQUIRE(std::get<0>(r2) == Approx(2.6957997));
        REQUIRE(std::get<1>(r2) > 1);
        REQUIRE(std::get<1>(r2) < 100);
        REQUIRE(std::get<2>(r2));
    }
    
    SECTION("MarkPython2")
    {
        Matrix Y(20,1);
        Y << 1,0,0,1,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0;
        
        Matrix X(20,4);
        X.col(0) << 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1;
        X.col(1) << 2,0,0,1,0,2,0,0,0,2,0,2,0,0,0,1,0,0,0,1;
        X.col(2) << -1.21,0.28,1.08,-2.35,0.43,0.51,-0.57,0.55,-0.56,-0.89,-0.48,-1.00,-0.78,0.06,0.96,-0.11,-0.51,-0.91,-0.84,2.42;
        X.col(3) << 10.27,9.02,9.12,10.92,8.61,7.10,11.15,7.95,9.97,8.13,12.20,9.05,8.58,9.00,6.74,7.66,5.64,7.32,9.41,9.07;

        const std::vector<double> t { 0.50079649468604426,
                                     -0.5095444272148919,
                                     -1.2895002456509908,
                                      1.1723681383998066,
                                      0.23230345480231882,
                                      0.93189422561845447,
                                     -0.2069127050301138,
                                     -0.60003510467902954,
                                     -0.55302809530984465,
                                     -0.15176194806465379 };
        
        const auto r = _gt_statistic_null<Firth>(Y, X, 10, 3141, 5926, 5358);
        
        for (auto i = 0; i < t.size(); i++)
        {
            REQUIRE(std::get<0>(r[i]) == Approx(t[i]));
        }
    }

    SECTION("InvalidResponse")
    {
        Matrix Y(20, 1);
        Y << 0,2,0,0,0,0,1,0,0,1,1,1,1,0,0,0,0,0,1,0;
        
        Matrix X(20,4);
        X.col(0) << 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1;
        X.col(1) << 2,0,0,1,0,2,0,0,0,2,0,2,0,0,0,1,0,0,0,1;
        X.col(2) << -1.21,0.28,1.08,-2.35,0.43,0.51,-0.57,0.55,-0.56,-0.89,-0.48,-1.00,-0.78,0.06,0.96,-0.11,-0.51,-0.91,-0.84,2.42;
        X.col(3) << 10.27,9.02,9.12,10.92,8.61,7.10,11.15,7.95,9.97,8.13,12.20,9.05,8.58,9.00,6.74,7.66,5.64,7.32,9.41,9.07;

        REQUIRE_THROWS(Firth::solve(Y, X));
        REQUIRE_THROWS(_gt_statistic<Firth>(Y, X));
        REQUIRE_THROWS(_gt_statistic_null<Firth>(Y, X, 10, 3141, 5926, 5358));
    }
    
    SECTION("InvalidResponse")
    {
        Matrix Y(20, 1);
        Y << 0,2,0,0,0,0,1,0,0,1,1,1,1,0,0,0,0,0,1,0;
        
        Matrix X(20,4);
        X.col(0) << 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1;
        X.col(1) << 2,0,0,1,0,2,0,0,0,2,0,2,0,0,0,1,0,0,0,1;
        X.col(2) << -1.21,0.28,1.08,-2.35,0.43,0.51,-0.57,0.55,-0.56,-0.89,-0.48,-1.00,-0.78,0.06,0.96,-0.11,-0.51,-0.91,-0.84,2.42;
        X.col(3) << 10.27,9.02,9.12,10.92,8.61,7.10,11.15,7.95,9.97,8.13,12.20,9.05,8.58,9.00,6.74,7.66,5.64,7.32,9.41,9.07;
        
        REQUIRE_THROWS(Firth::solve(Y, X));
        REQUIRE_THROWS(_gt_statistic<Firth>(Y, X));
        REQUIRE_THROWS(_gt_statistic_null<Firth>(Y, X, 10, 3141, 5926, 5358));
    }
    
    SECTION("UnnormalizedExplanatory")
    {
        Matrix Y(239, 1);
        Y << 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;
        
        Matrix X(239,4);
        X.col(0) << 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1;
        X.col(1) << 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1;
        X.col(2) << 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,0,0,0,0,0,0,20,20,20,20,20,20,20,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,0,0,0,0,0,0,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20;
        X.col(3) << 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1;
        
        const auto r1 = Firth::firth(Y, X);
        
        REQUIRE(std::get<0>(r1)(0) == Approx(-0.362851308010));
        REQUIRE(std::get<0>(r1)(1) == Approx(-0.807167379656));
        REQUIRE(std::get<0>(r1)(2) == Approx(0.0202188241846));
        REQUIRE(std::get<0>(r1)(3) == Approx(0.764823484646));
        REQUIRE(std::get<1>(r1) > 1);
        REQUIRE(std::get<1>(r1) < 100);
        REQUIRE(std::get<2>(r1));
    }

    SECTION("PerfectSeparation")
    {
        Matrix Y(10,1);
        Y << 0,0,0,0,0,1,1,1,1,1;
        
        Matrix X(10,2);
        X.col(0) << 1,1,1,1,1,1,1,1,1,1;
        X.col(1) << -0.426165577414356,-0.355001838033406,-0.276047773214867,0.0874874238042033,0.833733170755138,0.834460129133672,1.16823174338441,1.31241550858861,2.25225573054322,2.50264540789068;
        
        const auto r = Firth::firth(Y, X);
        
        REQUIRE(std::get<0>(r)(0,0) == Approx(-1.74925355960));
        REQUIRE(std::get<0>(r)(1,0) == Approx(2.46048296827));
        REQUIRE(std::get<1>(r) > 1);
        REQUIRE(std::get<1>(r) < 100);
        REQUIRE(std::get<2>(r));
    }
    
    SECTION("CloseToPerfectSeparation")
    {
        Matrix Y(10,1);
        Y << 0,0,0,0,0,1,1,1,1,1;
        
        Matrix X(10,2);
        X.col(0) << 1,1,1,1,1,1,1,1,1,1;
        X.col(1) << -0.426165577414356,3.0,-0.276047773214867,0.0874874238042033,0.833733170755138,0.834460129133672,1.16823174338441,1.31241550858861,2.25225573054322,2.50264540789068;
        
        const auto r = Firth::firth(Y, X);
        
        REQUIRE(std::get<0>(r)(0,0) == Approx(-0.763668612824));
        REQUIRE(std::get<0>(r)(1,0) == Approx(0.672191520582));
        REQUIRE(std::get<1>(r) > 1);
        REQUIRE(std::get<1>(r) < 100);
        REQUIRE(std::get<2>(r));
    }
    
    SECTION("PerfectFit")
    {
        Matrix Y(6, 1);
        Y << 1,1,1,0,0,0;
        
        Matrix X(6,2);
        X.col(0) << 1,1,1,1,1,1;
        X.col(1) << 1,2,3,4,5,6;
        
        const auto r = Firth::firth(Y, X);

        REQUIRE(std::get<0>(r)(0,0) == Approx(3.95119368567));
        REQUIRE(std::get<0>(r)(1,0) == Approx(-1.12891248162));
        REQUIRE(std::get<1>(r) > 1);
        REQUIRE(std::get<1>(r) < 100);
        REQUIRE(std::get<2>(r));
    }
    
    SECTION("CloseToPerfectFit")
    {
        Matrix Y(6, 1);
        Y << 1,1,1,0,0,0;
        
        Matrix X(6,2);
        X.col(0) << 1,1,1,1,1,1;
        X.col(1) << 100,129,100,170,180,130;
        
        const auto r = Firth::firth(Y, X);
        
        REQUIRE(std::get<0>(r)(0,0) == Approx(6.53071));
        //REQUIRE(std::get<0>(r)(1,0) == Approx(-0.0485879946422));
        REQUIRE(std::get<1>(r) > 1);
        REQUIRE(std::get<1>(r) < 100);
        REQUIRE(std::get<2>(r));
    }

    SECTION("ExampleFromRPackage")
    {
        Matrix Y(239, 1);
        Y << 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;
        
        Matrix X(239,4);
        X.col(0) << 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1;
        X.col(1) << 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1;
        X.col(2) << 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1;
        X.col(3) << 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1;

        const auto r1 = Firth::firth(Y, X);
        
        REQUIRE(std::get<0>(r1)(0) == Approx(-0.362851308010));
        REQUIRE(std::get<0>(r1)(1) == Approx(-0.807167379656));
        REQUIRE(std::get<0>(r1)(2) == Approx(0.404376477326));
        REQUIRE(std::get<0>(r1)(3) == Approx(0.764823484646));
        REQUIRE(std::get<1>(r1) > 1);
        REQUIRE(std::get<1>(r1) < 100);
        REQUIRE(std::get<2>(r1));
    }
}

#endif
